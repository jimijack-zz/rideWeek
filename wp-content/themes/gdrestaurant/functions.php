<?php
/**
 * Title: Function
 *
 * Description: Defines theme specific functions including actions and filters.
 *
 * Please do not edit this file. This file is part of the Cyber Chimps Framework and all modifications
 * should be made in a child theme.
 *
 * @category Cyber Chimps Framework
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v2.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

// Load Core
require_once( get_template_directory() . '/cyberchimps/init.php' );

// Set the content width based on the theme's design and stylesheet.
if ( ! isset( $content_width ) )
	$content_width = 640; /* pixels */

// Define site info
function cyberchimps_add_site_info() { ?>
	<p>&copy; Company Name</p>	
<?php }
add_action('cyberchimps_site_info', 'cyberchimps_add_site_info');

function cyberchimps_theme_scripts() {
	// Load theme's js
	wp_enqueue_script( 'themejs', get_template_directory_uri() . '/inc/js/theme.js', array( 'jquery' ), false, true );
}
add_action( 'wp_enqueue_scripts', 'cyberchimps_theme_scripts', 999 );

if ( ! function_exists( 'cyberchimps_comment' ) ) :

// Template for comments and pingbacks.
// Used as a callback by wp_list_comments() for displaying the comments.
function cyberchimps_comment( $comment, $args, $depth ) {
	$GLOBALS['comment'] = $comment;
	switch ( $comment->comment_type ) :
		case 'pingback' :
		case 'trackback' :
	?>
	<li class="post pingback">
		<p><?php _e( 'Pingback:', 'cyberchimps' ); ?> <?php comment_author_link(); ?><?php edit_comment_link( __( '(Edit)', 'cyberchimps' ), ' ' ); ?></p>
	<?php
			break;
		default :
	?>
	<li <?php comment_class(); ?> id="li-comment-<?php comment_ID(); ?>">
		<article id="comment-<?php comment_ID(); ?>" class="comment">
			<footer>
				<div class="comment-author vcard">
					<?php echo get_avatar( $comment, 40 ); ?>
					<?php printf( '%s <span class="says">' . __( 'says:', 'cyberchimps' ) . '</span>', sprintf( '<cite class="fn">%s</cite>', get_comment_author_link() ) ); ?>
				</div><!-- .comment-author .vcard -->
				<?php if ( $comment->comment_approved == '0' ) : ?>
					<em><?php _e( 'Your comment is awaiting moderation.', 'cyberchimps' ); ?></em>
					<br />
				<?php endif; ?>

				<div class="comment-meta commentmetadata">
					<a href="<?php echo esc_url( get_comment_link( $comment->comment_ID ) ); ?>"><time pubdate datetime="<?php comment_time( 'c' ); ?>">
					<?php
						/* translators: 1: date, 2: time */
						printf( __( '%1$s at %2$s', 'cyberchimps' ), get_comment_date(), get_comment_time() ); ?>
					</time></a>
					<?php edit_comment_link( __( '(Edit)', 'cyberchimps' ), ' ' );
					?>
				</div><!-- .comment-meta .commentmetadata -->
			</footer>

			<div class="comment-content"><?php comment_text(); ?></div>

			<div class="reply">
				<?php comment_reply_link( array_merge( $args, array( 'depth' => $depth, 'max_depth' => $args['max_depth'] ) ) ); ?>
			</div><!-- .reply -->
		</article><!-- #comment-## -->

	<?php
			break;
	endswitch;
}
endif; // ends check for cyberchimps_comment()

if ( ! function_exists( 'cyberchimps_posted_on' ) ) :

//Prints HTML with meta information for the current post-date/time and author.
function cyberchimps_posted_on() {
	
	if( is_single() ) {
		$show_date = ( cyberchimps_get_option( 'single_post_byline_date', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_date', 1 ) : false;
		$show_author = ( cyberchimps_get_option( 'single_post_byline_author', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_author', 1 ) : false;
		$show_comment = ( cyberchimps_get_option( 'single_post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_comments', 1 ) : false;
	}
	elseif( is_archive() ) {
		$show_date = ( cyberchimps_get_option( 'archive_post_byline_date', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_date', 1 ) : false;  
		$show_author = ( cyberchimps_get_option( 'archive_post_byline_author', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_author', 1 ) : false;
		$show_comment = ( cyberchimps_get_option( 'archive_post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_comments', 1 ) : false;
	}
	else {
		$show_date = ( cyberchimps_get_option( 'post_byline_date', 1 ) ) ? cyberchimps_get_option( 'post_byline_date', 1 ) : false; 
		$show_author = ( cyberchimps_get_option( 'post_byline_author', 1 ) ) ? cyberchimps_get_option( 'post_byline_author', 1 ) : false; 
		$show_comment = ( cyberchimps_get_option( 'post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'post_byline_comments', 1 ) : false; 
	}
	
	$posted_on = sprintf( '<span class="date-time"><a href="%1$s" title="%2$s" rel="bookmark"><time class="entry-date" datetime="%3$s">%4$s</time></a></span>%5$s<span class="author vcard"><a class="url fn n" href="%6$s" title="%7$s" rel="author">%8$s</a></span>%9$s',
		esc_url( get_permalink() ),
		esc_attr( get_the_time() ),
		esc_attr( get_the_date( 'c' ) ),
		( $show_date ) ? esc_html( get_the_date() ) : '',
		( $show_author && $show_date ) ? ' &#183; ' : '',
		esc_url( get_author_posts_url( get_the_author_meta( 'ID' ) ) ),
		esc_attr( sprintf( __( 'View all posts by', 'cyberchimps' ) . ' %s', get_the_author() ) ),
		( $show_author ) ? esc_html( get_the_author() ) : '',
		( ( $show_date || $show_author ) && $show_comment && ! post_password_required() && ( comments_open() || '0' != get_comments_number() ) ) ? ' &#183; ' : ''
	);
	apply_filters( 'cyberchimps_posted_on', $posted_on );
	echo $posted_on;
}
endif;

//add meta entry category to single post, archive and blog list if set in options
function cyberchimps_posted_in() {
	global $post;

	if( is_single() ) {
		$show = ( cyberchimps_get_option( 'single_post_byline_categories', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_categories', 1 ) : false; 
	}
	elseif( is_archive() ) {
		$show = ( cyberchimps_get_option( 'archive_post_byline_categories', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_categories', 1 ) : false;  
	}
	else {
		$show = ( cyberchimps_get_option( 'post_byline_categories', 1 ) ) ? cyberchimps_get_option( 'post_byline_categories', 1 ) : false;  
	}
	if( $show ):
				$categories_list = get_the_category_list( ', ' );
				if ( $categories_list ) :
				$cats = sprintf( __( 'Posted in', 'cyberchimps' ) . ' %1$s', $categories_list );
			?>
			<span class="cat-links">
				<?php echo apply_filters( 'cyberchimps_post_categories', $cats ); ?>
			</span>
      <span class="sep"> <?php echo apply_filters( 'cyberchimps_entry_meta_sep', '|' ); ?> </span>
	<?php endif;
	endif;
}

//add meta entry tags to single post, archive and blog list if set in options
function cyberchimps_post_tags() {
	global $post;
	
	if( is_single() ) {
		$show = ( cyberchimps_get_option( 'single_post_byline_tags', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_tags', 1 ) : false; 
	}
	elseif( is_archive() ) {
		$show = ( cyberchimps_get_option( 'archive_post_byline_tags', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_tags', 1 ) : false;  
	}
	else {
		$show = ( cyberchimps_get_option( 'post_byline_tags', 1 ) ) ? cyberchimps_get_option( 'post_byline_tags', 1 ) : false;  
	}
	if( $show ):
	$tags_list = get_the_tag_list( '', ', ' );
				if ( $tags_list ) :
				$tags = sprintf( __( 'Tags:', 'cyberchimps' ) . ' %1$s', $tags_list );
			?>
			<span class="taglinks">
				<?php echo apply_filters( 'cyberchimps_post_tags', $tags ); ?>
			</span>
      <span class="sep"> <?php echo apply_filters( 'cyberchimps_entry_meta_sep', '|' ); ?> </span>
			<?php endif; // End if $tags_list
	endif;
}

//add meta entry comments to single post, archive and blog list if set in options
function cyberchimps_post_comments() {
	global $post;
	
	if( is_single() ) {
		$show = ( cyberchimps_get_option( 'single_post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'single_post_byline_comments', 1 ) : false; 
	}
	elseif( is_archive() ) {
		$show = ( cyberchimps_get_option( 'archive_post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'archive_post_byline_comments', 1 ) : false;  
	}
	else {
		$show = ( cyberchimps_get_option( 'post_byline_comments', 1 ) ) ? cyberchimps_get_option( 'post_byline_comments', 1 ) : false;  
	}
	$leave_comment = ( is_single() || is_page() ) ? '' : __( 'Leave a comment', 'cyberchimps' );
	if( $show ):
		if ( ! post_password_required() && ( comments_open() || '0' != get_comments_number() ) ) : ?>
			<span class="comments-link"><?php comments_popup_link( $leave_comment, __( '1 Comment', 'cyberchimps' ), '% ' . __( 'Comments', 'cyberchimps' ) ); ?></span>
    <?php endif;
	endif;
}

// set up next and previous post links for lite themes only
function cyberchimps_next_previous_posts() {
	if( get_next_posts_link() || get_previous_posts_link() ): ?>
	<div class="more-content">
		<div class="row-fluid">
			<div class="span6 previous-post">
				<?php previous_posts_link( __( '<span class="more-arrow">&#8592;</span> Previous Posts', 'cyberchimps' ) ); ?>
			</div>
			<div class="span6 next-post">
				<?php next_posts_link( __( 'Next Posts <span class="more-arrow">&#8594;</span>', 'cyberchimps' ) ); ?>
			</div>
		</div>
	</div>
<?php
	endif;
}
add_action( 'cyberchimps_after_content', 'cyberchimps_next_previous_posts' );

// core options customization Names and URL's
//Pro or Free
function cyberchimps_theme_check() {
	$level = 'free';
	return $level;
}

//Theme Name
function cyberchimps_options_theme_name(){
	$text = 'CyberChimps';
	return $text;
}
//Theme Pro Name
function cyberchimps_upgrade_bar_pro_title() {
	$text = 'CyberChimps Pro';
	return $text;
}
//Upgrade link
function cyberchimps_upgrade_bar_pro_link() {
	$url = 'http://cyberchimps.com/responsepro/';
	return $url;
}
//Doc's URL
function cyberchimps_options_documentation_url() {
	$url = 'http://cyberchimps.com/responsepro/docs/';
	return $url;
}
// Support Forum URL
function cyberchimps_options_support_forum() {
	$admin = cyberchimps_get_option( 'admin', array( 'support_url' => 'http://support.godaddy.com/help/category/217/my-account' ) );
	$url = $admin['support_url'];
	return $url;
}
//Page Options Help URL
function cyberchimps_options_page_options_help() {
	$url = 'http://cyberchimps.com/responsepro/docs/';
	return $url;
}
// Slider Options Help URL
function cyberchimps_options_slider_options_help() {
	$url = 'http://cyberchimps.com/responsepro/docs/';
	return $url;
}
add_filter( 'cyberchimps_current_theme_name', 'cyberchimps_options_theme_name', 1 );
add_filter( 'cyberchimps_upgrade_pro_title', 'cyberchimps_upgrade_bar_pro_title' );
add_filter( 'cyberchimps_upgrade_link', 'cyberchimps_upgrade_bar_pro_link' );
add_filter( 'cyberchimps_documentation', 'cyberchimps_options_documentation_url' );
add_filter( 'cyberchimps_support_forum', 'cyberchimps_options_support_forum' );
add_filter( 'cyberchimps_page_options_help', 'cyberchimps_options_page_options_help' );
add_filter( 'cyberchimps_slider_options_help', 'cyberchimps_options_slider_options_help' );

// Help Section
function cyberchimps_options_help_header() {
	$text = 'CyberChimps';
	return $text;
}
function cyberchimps_options_help_sub_header(){
	$text = __( 'CyberChimps Professional Responsive WordPress Theme', 'cyberchimps' );
	return $text;
}
add_filter( 'cyberchimps_help_heading', 'cyberchimps_options_help_header' );
add_filter( 'cyberchimps_help_sub_heading', 'cyberchimps_options_help_sub_header' );

// Branding images and defaults

// Banner default
function cyberchimps_banner_default() {
	$url = '/images/branding/banner.jpg';
	return $url;
}
add_filter( 'cyberchimps_banner_img', 'cyberchimps_banner_default' );

//theme specific skin options in array. Must always include option default
function cyberchimps_skin_color_options( $options ) {
	$imagepath = get_template_directory_uri(). '/inc/css/skins/images/';
	$options = array(
		'default'	=> $imagepath . 'default.png',
		'red'	=> $imagepath . 'red.png',
		'green'	=> $imagepath . 'green.png',
		'blue'	=> $imagepath . 'blue.png'
		);
	return $options;
}
add_filter( 'cyberchimps_skin_color', 'cyberchimps_skin_color_options' );

// theme specific background images
function cyberchimps_background_image( $options ) {
	$imagepath =  get_template_directory_uri() . '/cyberchimps/lib/images/';
	$options = array(
			'none' => $imagepath . 'backgrounds/thumbs/none.png',
			'noise' => $imagepath . 'backgrounds/thumbs/noise.png',
			'blue' => $imagepath . 'backgrounds/thumbs/blue.png',
			'dark' => $imagepath . 'backgrounds/thumbs/dark.png',
			'space' => $imagepath . 'backgrounds/thumbs/space.png'
			);
	return $options;
}
add_filter( 'cyberchimps_background_image', 'cyberchimps_background_image' );

// theme specific typography options
function cyberchimps_typography_sizes( $sizes ) {
	$sizes = array( '8','9','10','12','14','16','20' );
	return $sizes;
}
function cyberchimps_typography_faces( $faces ) {
	$faces = array(
				'Arial, Helvetica, sans-serif'						 => 'Arial',
				'Arial Black, Gadget, sans-serif'					 => 'Arial Black',
				'Comic Sans MS, cursive'							 => 'Comic Sans MS',
				'Courier New, monospace'							 => 'Courier New',
				'"Droid Serif", serif'							=> 'Droid Serif',
				'Georgia, serif'									 => 'Georgia',
				'Impact, Charcoal, sans-serif'						 => 'Impact',
				'Lucida Console, Monaco, monospace'					 => 'Lucida Console',
				'Lucida Sans Unicode, Lucida Grande, sans-serif'	 => 'Lucida Sans Unicode',
				'Palatino Linotype, Book Antiqua, Palatino, serif'	 => 'Palatino Linotype',
				'Tahoma, Geneva, sans-serif'						 => 'Tahoma',
				'Times New Roman, Times, serif'						 => 'Times New Roman',
				'Trebuchet MS, sans-serif'							 => 'Trebuchet MS',
				'Verdana, Geneva, sans-serif'						 => 'Verdana',
				'Symbol'											 => 'Symbol',
				'Webdings'											 => 'Webdings',
				'Wingdings, Zapf Dingbats'							 => 'Wingdings',
				'MS Sans Serif, Geneva, sans-serif'					 => 'MS Sans Serif',
				'MS Serif, New York, serif'							 => 'MS Serif',
				);
	return $faces;
}
function cyberchimps_typography_styles( $styles ) {
	$styles = array( 'normal' => 'Normal','bold' => 'Bold' );
	return $styles;
}
function cyberchimps_typography_defaults() {
	$defaults = array(
										'size' => '14px',
										'face' => '"Droid Serif", serif',
										'style' => 'normal',
										'color' => '#666666' 
										);
	return $defaults;
}
add_filter( 'cyberchimps_typography_sizes', 'cyberchimps_typography_sizes' );
add_filter( 'cyberchimps_typography_faces', 'cyberchimps_typography_faces' );
add_filter( 'cyberchimps_typography_styles', 'cyberchimps_typography_styles' );
add_filter( 'typography_defaults', 'cyberchimps_typography_defaults' );

//header drag and drop
function cyberchimps_header_drag_and_drop_options() {
	$options = array(
			'cyberchimps_logo'				=> __( 'Logo', 'cyberchimps' )
			);
	return $options;
}
add_filter( 'header_drag_and_drop_options', 'cyberchimps_header_drag_and_drop_options' );
function cyberchimps_header_drag_and_drop_default() {
	$default = array(
			'cyberchimps_logo'    => __( 'Logo', 'cyberchimps' )
			);
	return $default;
}
add_filter( 'header_drag_and_drop_default', 'cyberchimps_header_drag_and_drop_default' );

//add option for header image
function cyberchimps_add_theme_options( $original ) {
	$new_field[][1] = array( 
							'name' => __('Header Image', 'cyberchimps'),
							'id' => 'header_image',
							'std' => '',
							'type' => 'upload',
							'desc' => __( 'The image used for the header needs to be a large image. We recommend a minimum width of 1000px and a maximum height of 550px', 'cyberchimps' ),
							'std'			=> get_template_directory_uri() . '/images/header.jpg',
							'section' => 'cyberchimps_header_options_section',
							'heading' => 'cyberchimps_header_heading'
						);
	$new_field[][2] = array( 
							'name' => __('Header Image Caption', 'cyberchimps'),
							'id' => 'header_image_caption',
							'std' => '',
							'type' => 'editor',
							'section' => 'cyberchimps_header_options_section',
							'heading' => 'cyberchimps_header_heading'
						);
	$new_fields = cyberchimps_array_field_organizer( $original, $new_field );
	return $new_fields;
}
add_filter( 'cyberchimps_field_filter', 'cyberchimps_add_theme_options', 10 );

// add featured image size
if ( function_exists( 'add_image_size' ) ) { 
	add_image_size( 'restaurant', 999, 150, true );
}
function cyberchimps_featured_image_size() {
	$size = 'restaurant';
	return $size;
}
add_filter( 'cyberchimps_post_thumbnail_size', 'cyberchimps_featured_image_size' );

// Remove contact section and header drag and drop section
function cyberchimps_contact_section( $original ) {
	$new = cyberchimps_remove_options( $original, array( 'cyberchimps_header_details_section', 'cyberchimps_header_drag_drop_section' ) );
	return $new;
}
add_filter( 'cyberchimps_sections_filter', 'cyberchimps_contact_section' );

// Walker class for resturant theme. Defines menu structure.
class cyberchimps_Resturant_Walker extends Walker_Nav_Menu {
	
    function start_lvl( &$output, $depth ) {
		//In a child UL, add the 'dropdown-menu' class
		if( $depth == 0 ) {
			$indent = str_repeat( "\t", $depth );
			$output .= "\n$indent<ul class=\"dropdown-menu\">\n";
		} else {
			$indent = str_repeat( "\t", $depth );
			$output .= "\n$indent<ul>\n";
		}
	}
	
	function start_el( &$output, $item, $depth = 0, $args = array(), $id = 0 ) {

		$indent = ( $depth ) ? str_repeat( "\t", $depth ) : '';

		$li_attributes = '';
		$class_names = $value = '';

		$classes = empty( $item->classes ) ? array() : ( array ) $item->classes;

		//Add class and attribute to LI element that contains a submenu UL.
		if ( $args->has_children && $depth < 1 ){
			$classes[] 		= 'dropdown';
			$li_attributes .= 'data-dropdown="dropdown"';
		}
		$classes[] = 'menu-item-' . $item->ID;
		//If we are on the current page, add the active class to that menu item.
		$classes[] = ($item->current) ? 'active' : '';

		//Make sure you still add all of the WordPress classes.
		$class_names = join( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args ) );
		$class_names = ' class="' . esc_attr( $class_names ) . '"';

		$id = apply_filters( 'nav_menu_item_id', 'menu-item-'. $item->ID, $item, $args );
		$id = strlen( $id ) ? ' id="' . esc_attr( $id ) . '"' : '';

		$output .= $indent . '<li' . $id . $value . $class_names . $li_attributes . '>';
		//Add attributes to link element.
		$attributes  = ! empty( $item->attr_title ) ? ' title="'  . esc_attr( $item->attr_title ) .'"' : '';
		$attributes .= ! empty( $item->target ) ? ' target="' . esc_attr( $item->target     ) .'"' : '';
		$attributes .= ! empty( $item->xfn ) ? ' rel="'    . esc_attr( $item->xfn        ) .'"' : '';
		$attributes .= ! empty( $item->url ) ? ' href="'   . esc_attr( $item->url        ) .'"' : '';
		$attributes .= ($args->has_children && $depth < 1) ? ' class="dropdown-toggle"' : '';

		$item_output = $args->before;
		$item_output .= '<a'. $attributes .'>';
		$item_output .= $args->link_before . apply_filters( 'the_title', $item->title, $item->ID ) . $args->link_after;
		$item_output .= ($args->has_children && $depth < 1) ? ' <b class="caret"></b> ' : '';
		
		// Add description if it is a top level menu.
		if ( $depth == 0 ) {
			$item_output .= '<h4 class="menu-description">' . $item->description . '</h4>';
		}
		
		$item_output .= '</a>';
		$item_output .= $args->after;

		$output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
	}
	
	//Overwrite display_element function to add has_children attribute. Not needed in >= Wordpress 3.4
	function display_element( $element, &$children_elements, $max_depth, $depth=0, $args, &$output ) {

		if ( !$element )
			return;

		$id_field = $this->db_fields['id'];
		
		//display this element
		if ( is_array( $args[0] ) ) 
			$args[0]['has_children'] = ! empty( $children_elements[$element->$id_field] );
		else if ( is_object( $args[0] ) ) 
			$args[0]->has_children = ! empty( $children_elements[$element->$id_field] ); 
		$cb_args = array_merge( array(&$output, $element, $depth), $args);
		call_user_func_array(array(&$this, 'start_el'), $cb_args);

		$id = $element->$id_field;

		// descend only when the depth is right and there are childrens for this element
		if ( ($max_depth == 0 || $max_depth > $depth+1 ) && isset( $children_elements[$id]) ) {

			foreach( $children_elements[ $id ] as $child ){

				if ( !isset($newlevel) ) {
					$newlevel = true;
					//start the child delimiter
					$cb_args = array_merge( array(&$output, $depth), $args);
					call_user_func_array(array(&$this, 'start_lvl'), $cb_args);
				}
				$this->display_element( $child, $children_elements, $max_depth, $depth + 1, $args, $output );
			}
				unset( $children_elements[ $id ] );
		}

		if ( isset($newlevel) && $newlevel ){
			//end the child delimiter
			$cb_args = array_merge( array(&$output, $depth), $args);
			call_user_func_array(array(&$this, 'end_lvl'), $cb_args);
		}

		//end this element
		$cb_args = array_merge( array(&$output, $element, $depth), $args);
		call_user_func_array(array(&$this, 'end_el'), $cb_args);
	}
}

/*************************** SOCIAL OPTIONS CUSTOMIZATION STARTS *******************************/

//Remove searchbar option
function cyberchimps_remove_field( $orig ) {
	$new_fields = cyberchimps_remove_options( $orig, array( 'searchbar' ) );
	return $new_fields;
}
add_filter( 'cyberchimps_field_filter', 'cyberchimps_remove_field' );

// Remove social option section from header
function cyberchimps_remove_section( $orig ) {
	$new_sections = cyberchimps_remove_options( $orig, array( 'cyberchimps_header_social_section' ) );
	return $new_sections;
}
add_filter( 'cyberchimps_sections_filter', 'cyberchimps_remove_section' );

// Add social option section to footer.
function cyberchimps_add_section( $original ) {
	$new_section[][1] = array( 
							'id'		=> 'cyberchimps_footer_social_section',
							'label'		=> __('Social Options', 'cyberchimps'),
							'heading'	=> 'cyberchimps_footer_heading'
							);
	
	$new_sections = cyberchimps_array_section_organizer( $original, $new_section );
	
	return $new_sections;
}
add_filter( 'cyberchimps_sections_filter', 'cyberchimps_add_section' );

// Add social options to social section of footer.
function cyberchimps_add_social_options( $original ) {

	$imagepath =  get_template_directory_uri() . '/cyberchimps/lib/images/';
	
	/********** SOCIAL OPTIONS STARTS ************/
	$fields_list[][1]	= array(
		'name'		=> __('Choose your icon style', 'cyberchimps'),
		'id'		=> 'theme_backgrounds',
		'std'		=> apply_filters( 'cyberchimps_social_icon_default', 'default' ),
		'type'		=> 'images',
		'options'	=> apply_filters( 'cyberchimps_social_icon_options', array(
									'default'	=> $imagepath . 'social/thumbs/icons-default.png',
									'legacy'	=> $imagepath . 'social/thumbs/icons-classic.png',
									'round'		=> $imagepath . 'social/thumbs/icons-round.png' 
									) ),
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][2]	= array(
		'name'		=> __('Twitter', 'cyberchimps'),
		'id' 		=> 'social_twitter',
		'std'		=> 'checked',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][3]	= array(
		'name'		=> __('Twitter URL', 'cyberchimps'),
		'id'		=> 'twitter_url',
		'class'		=> 'social_twitter_toggle',
		'std'		=> 'http://www.twitter.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][4]	= array(
		'name'		=> __('Facebook', 'cyberchimps'),
		'id'		=> 'social_facebook',
		'std'		=> 'checked',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][5]	= array(
		'name'		=> __('Facebook URL', 'cyberchimps'),
		'id'		=> 'facebook_url',
		'class'		=> 'social_facebook_toggle',
		'std'		=> 'http://www.facebook.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][6]	= array(
		'name'		=> __('Google+', 'cyberchimps'),
		'id'		=> 'social_google',
		'std'		=> 'checked',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][7]	= array(
		'name'		=> __('Google+ URL', 'cyberchimps'),
		'id'		=> 'google_url',
		'class'		=> 'social_google_toggle',
		'std'		=> 'http://www.google.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][8]	= array(
		'name'		=> __('Flickr', 'cyberchimps'),
		'id'		=> 'social_flickr',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][9]	= array(
		'name'		=> __('Flickr URL', 'cyberchimps'),
		'id'		=> 'flickr_url',
		'class'		=> 'social_flickr_toggle',
		'std'		=> 'http://www.flickr.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][10]	= array(
		'name'		=> __('Pinterest', 'cyberchimps'),
		'id'		=> 'social_pinterest',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][11]	= array(
		'name'		=> __('Pinterest URL', 'cyberchimps'),
		'id'		=> 'pinterest_url',
		'class'		=> 'social_pinterest_toggle',
		'std'		=> 'http://www.pinterest.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][12]	= array(
		'name'		=> __('LinkedIn', 'cyberchimps'),
		'id'		=> 'social_linkedin',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][13] = array(
		'name'		=> __('LinkedIn URL', 'cyberchimps'),
		'id'		=> 'linkedin_url',
		'class'		=> 'social_linkedin_toggle',
		'std'		=> 'http://www.linkedin.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][14]	= array(
		'name'		=> __('YouTube', 'cyberchimps'),
		'id'		=> 'social_youtube',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][15]	= array(
		'name'		=> __('YouTube URL', 'cyberchimps'),
		'id'		=> 'youtube_url',
		'class'		=> 'social_youtube_toggle',
		'std'		=> 'http://www.youtube.com/',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][16]	= array(
		'name'		=> __('RSS', 'cyberchimps'),
		'id'		=> 'social_rss',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][17]	= array(
		'name'		=> __('RSS URL', 'cyberchimps'),
		'id'		=> 'rss_url',
		'class'		=> 'social_rss_toggle',
		'std'		=> get_bloginfo_rss( 'rss_url' ),
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	
	$fields_list[][18]	= array(
		'name'		=> __('Email', 'cyberchimps'),
		'id'		=> 'social_email',
		'type'		=> 'toggle',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
		
	$fields_list[][19]	= array(
		'name'		=> __('Email Address', 'cyberchimps'),
		'id'		=> 'email_url',
		'class'		=> 'social_email_toggle',
		'type'		=> 'text',
		'section'	=> 'cyberchimps_footer_social_section',
		'heading'	=> 'cyberchimps_footer_heading'
	);
	/********** SOCIAL OPTIONS ENDS ************/					
											
	$fields_list = cyberchimps_array_field_organizer( $original, $fields_list );
	return $fields_list;
}
add_filter( 'cyberchimps_field_filter', 'cyberchimps_add_social_options' );

/*************************** SOCIAL OPTIONS CUSTOMIZATION ENDS *******************************/
?>